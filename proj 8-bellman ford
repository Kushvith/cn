package com.kushvith;
//program to find the shorest pat for bellman ford algoritm

import java.util.*;

public class Main {
    private int D[];
    private int num_ver;
    public  static  final int MAX_VALUE = 999;
    public Main(int num_ver)
    {
        this.num_ver = num_ver;
        D = new int[num_ver +1];
    }
    public void bellmanFordEvaluation(int source,int A[][])
    {
        for(int node =1;node <= num_ver;node++)
            D[node] = MAX_VALUE;
        D[source] = 0;
        for(int node =1;node <= num_ver-1;node++)
        {
            for(int sn=1;sn<=num_ver;sn++)
            {
                for(int dn=1;dn<=num_ver;dn++)
                {
                    if(A[sn][dn] !=MAX_VALUE)
                    {
                        if(D[dn]>D[sn]+A[sn][dn])
                        {
                            D[dn] = D[sn]+A[sn][dn];
                        }
                    }
                }
            }
        }
        for(int sn=1;sn<= num_ver;sn++)
        {
            for(int dn =1;dn<=num_ver;dn++)
                if(A[sn][dn] != MAX_VALUE)
                    if(D[dn] > D[sn] + A[sn][dn])
                        System.out.println("the graph contains the negative edge cycle");
        }
        for(int vertex=1; vertex <= num_ver;vertex++)
        {
            System.out.println("the distance of source " +source+"to"+vertex+"is"+D[vertex]);
        }
    }
    public static void main(String args[])
    {
        int num_ver = 0;
        int source;
        Scanner sc = new Scanner(System.in);
        System.out.println("enter the number of vertex");
        num_ver = sc.nextInt();
        int A[][] = new int[num_ver +1][num_ver +1];
        System.out.println("enter the adjacency matrix");
        for(int sn=1;sn<=num_ver;sn++)
            for(int dn=1;dn<=num_ver;dn++)
            {
                A[sn][dn] = sc.nextInt();
                if(sn == dn)
                {
                    A[sn][dn] =0;
                    continue;
                }
                if(A[sn][dn] == 0)
                {
                    A[sn][dn] = MAX_VALUE;
                }
            }
        System.out.println("enter the source vertex");
        source = sc.nextInt();
        Main b = new Main(num_ver);
        b.bellmanFordEvaluation(source,A);
        sc.close();
    }
}
